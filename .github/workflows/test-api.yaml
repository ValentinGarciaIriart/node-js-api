name: Test Api
on: [workflow_dispatch]

jobs:
  test-api:
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    services:
      app:
        image: alialaa17/simple-node-api #necesito esta seccion de app image porque github actions no tiene un build como docker
        #ports:
        #  - 3001:3000
        env:
          MONGO_HOSTNAME: mongo #debe ser igual a la linea de abajo (viceversa), aca va con : en vez de igual como en el docker file
      mongo:
        image: mongo #obviamente ya existe en dockerhub
        #ports:
        #  - 27017:27017
    steps: #los steps van a correr en el runner machine, no corren dentro de un container como los servicios definidos arriba, ademas de 
    #que no se especifico dentro de un container, si no dentro de un job para el runner machine
      - name: Install Curl
        run: |
           apt-get -y update
           apt-get -y install curl
      - name: Dump Services Context
        run: echo '${{ toJson(job.services) }}'
      - name: Post a user
        run: 'curl -X POST http://app:3000/api/users -H ''Content-Type: application/json'' -d ''{"username": "hello","address": "dwded"}'''
        # -X es el flag de CURL para hacer una POST Request en HTTP; -H es el flag de headers y -d es el de data
      - name: Get Users
        run: curl http://app:3000/api/users
        # tanto en la 28 como en la 31 lo cambie a app:3000 app porque asi llame al servicio en la linea 9 y 3000 porque es el puerto
        #en docker donde esta la aplicacion en node
        # la otra forma era localhost:3001 porque asi lo habia mapeado en los puertos de cada imagen (en realidad la de node js)
        #esto esta asi porque al laburar todo adentro del mismo container, participan de la misma network y docker expone todos los puertos
        # a las imagenes o aplicaciones corriendo dentro del mismo contenedor, en cambio si los servicios y mi workflow estan por fuera
        #es con localhost para poder comunicarse como estaba anteriormente